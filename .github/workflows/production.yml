# 🚀 Claude Code Desktop - Production CI/CD Pipeline
# Comprehensive GitHub Actions workflow for production deployment

name: Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: claude-code-desktop

jobs:
  # 🔍 Security & Code Quality
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=high
      
      - name: Run dependency check
        run: npm run security:check
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 🧪 Comprehensive Testing
  test-suite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit -- --coverage
      
      - name: Run integration tests
        run: npm run test:integration
      
      - name: Run production tests
        run: npm run test:production
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 🔧 Build & Bundle Analysis
  build-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build production bundle
        run: npm run build:production
      
      - name: Analyze bundle size
        run: npm run build:analyze
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/

  # 🐳 Docker Build & Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite, build-analysis]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.claude-code-desktop.dev
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment"
          # Add your staging deployment commands here
      
      - name: Run staging health checks
        run: |
          echo "🏥 Running health checks"
          # Add health check commands here
      
      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests"
          npm run test:smoke

  # 🎯 Production Deployment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite, build-analysis, docker-build, deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://claude-code-desktop.dev
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment"
          # Add your production deployment commands here
      
      - name: Run production health checks
        run: |
          echo "🏥 Running production health checks"
          # Add production health check commands here
      
      - name: Verify deployment
        run: |
          echo "✅ Verifying production deployment"
          npm run verify:deployment

  # 📊 Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance tests
        run: npm run test:performance
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

  # 📈 Security Reporting
  security-report:
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build]
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "🔒 Security Report Generated"
          echo "- Security scan: ${{ needs.security-scan.result }}"
          echo "- Docker scan: ${{ needs.docker-build.result }}"
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

  # 🔔 Notifications
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          echo "📢 Deployment notification sent"
          echo "- Status: ${{ needs.deploy-production.result }}"
          echo "- Environment: production"
          echo "- Version: ${{ github.ref_name }}"
